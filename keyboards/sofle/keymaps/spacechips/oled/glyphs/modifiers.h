#include QMK_KEYBOARD_H

// Modifier glyphs are constructed in a 2x2 icon grid
// Each byte draws 2x4 vertical pixels, and each glyph is broken up into rows to make
// it easier to track and organise rendering each icon

// Provides off and on state glyphs for ALT modifier key
static const char PROGMEM alt_glyph[2][2][16] = {
    // 'alt_off', 16x16px
    {
        { 0x00, 0xf8, 0x0c, 0x06, 0x22, 0x22, 0x42, 0x82, 0x02, 0x02, 0x22, 0x22, 0x02, 0x06, 0x0c, 0xf8 }, 
        { 0x00, 0x1f, 0x30, 0x60, 0x40, 0x40, 0x40, 0x40, 0x41, 0x42, 0x44, 0x44, 0x40, 0x60, 0x30, 0x1f }
    },
    // 'alt_on', 16x16px
    {
        { 0x00, 0xf8, 0xfc, 0xfe, 0xde, 0xde, 0xbe, 0x7e, 0xfe, 0xfe, 0xde, 0xde, 0xfe, 0xfe, 0xfc, 0xf8 }, 
        { 0x00, 0x1f, 0x3f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7e, 0x7d, 0x7b, 0x7b, 0x7f, 0x7f, 0x3f, 0x1f } 
    }
};

// Provides off and on state glyphs for COMMAND modifier key
static const char PROGMEM command_glyph[2][2][16] = {
    // 'command_off', 16x16px
    {
        { 0xf8, 0x0c, 0x06, 0x22, 0x52, 0xe2, 0x42, 0x42, 0x42, 0xe2, 0x52, 0x22, 0x06, 0x0c, 0xf8, 0x00 }, 
        { 0x1f, 0x30, 0x60, 0x44, 0x4a, 0x47, 0x42, 0x42, 0x42, 0x47, 0x4a, 0x44, 0x60, 0x30, 0x1f, 0x00 } 
    },
    // 'command_on', 16x16px
    {
        { 0xf8, 0xfc, 0xfe, 0xde, 0xae, 0x1e, 0xbe, 0xbe, 0xbe, 0x1e, 0xae, 0xde, 0xfe, 0xfc, 0xf8, 0x00 }, 
        { 0x1f, 0x3f, 0x7f, 0x7b, 0x75, 0x78, 0x7d, 0x7d, 0x7d, 0x78, 0x75, 0x7b, 0x7f, 0x3f, 0x1f, 0x00 }
    }
};

// Provides off and on state glyphs for CTRL modifier key
static const char PROGMEM ctrl_glyph[2][2][16] = {
    // 'ctrl_off', 16x16px
    {
        { 0x00, 0xf8, 0x0c, 0x06, 0x02, 0x02, 0x82, 0x42, 0x22, 0x42, 0x82, 0x02, 0x02, 0x06, 0x0c, 0xf8 }, 
        { 0x00, 0x1f, 0x30, 0x60, 0x42, 0x41, 0x40, 0x40, 0x40, 0x40, 0x40, 0x41, 0x42, 0x60, 0x30, 0x1f }
    },
    // 'ctrl_on', 16x16px
    {
        { 0x00, 0xf8, 0xfc, 0xfe, 0xfe, 0xfe, 0x7e, 0xbe, 0xde, 0xbe, 0x7e, 0xfe, 0xfe, 0xfe, 0xfc, 0xf8 }, 
        { 0x00, 0x1f, 0x3f, 0x7f, 0x7d, 0x7e, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7e, 0x7d, 0x7f, 0x3f, 0x1f } 
    }
};

// Provides off and on state glyphs for SHIFT key
static const char PROGMEM shift_glyph[2][2][16] = {
    // 'shift_off', 16x16px
    {
        { 0xf8, 0x0c, 0x06, 0x02, 0x82, 0x42, 0x22, 0x12, 0x22, 0x42, 0x82, 0x02, 0x06, 0x0c, 0xf8, 0x00 }, 
        { 0x1f, 0x30, 0x60, 0x41, 0x41, 0x4e, 0x48, 0x48, 0x48, 0x4e, 0x41, 0x41, 0x60, 0x30, 0x1f, 0x00 } 

    },
    // 'shift_on', 16x16px
    {
        { 0xf8, 0xfc, 0xfe, 0xfe, 0x7e, 0xbe, 0xde, 0xee, 0xde, 0xbe, 0x7e, 0xfe, 0xfe, 0xfc, 0xf8, 0x00 }, 
        { 0x1f, 0x3f, 0x7f, 0x7e, 0x7e, 0x71, 0x77, 0x77, 0x77, 0x71, 0x7e, 0x7e, 0x7f, 0x3f, 0x1f, 0x00 }
    }
};

// Provides off and on state glyphs for the caps word indicator
static const char PROGMEM capsword_glyph[2][64] = {
    // 'capsword-off', 32x16px
    {
        0xf0, 0x08, 0xe4, 0x14, 0x24, 0x04, 0xe4, 0x14, 0xe4, 0x04, 0xf4, 0x94, 0x64, 0x04, 0x64, 0x94, 
        0x24, 0x04, 0x04, 0xe4, 0x14, 0xe4, 0x04, 0xe4, 0x94, 0x14, 0x04, 0xe4, 0x94, 0x14, 0x08, 0xf0, 
        0x0f, 0x10, 0x27, 0x28, 0x24, 0x20, 0x2f, 0x21, 0x2f, 0x20, 0x2f, 0x20, 0x20, 0x20, 0x24, 0x28, 
        0x27, 0x20, 0x20, 0x27, 0x28, 0x27, 0x20, 0x2f, 0x20, 0x20, 0x20, 0x2f, 0x20, 0x20, 0x10, 0x0f
    },
    // 'capsword-on', 32x16px
    {
        0xf0, 0xf8, 0x1c, 0xec, 0xdc, 0xfc, 0x1c, 0xec, 0x1c, 0xfc, 0x0c, 0x6c, 0x9c, 0xfc, 0x9c, 0x6c, 
        0xdc, 0xfc, 0xfc, 0xfc, 0x1c, 0xec, 0x1c, 0xfc, 0x0c, 0xec, 0x1c, 0xfc, 0xfc, 0xfc, 0xf8, 0xf0, 
        0x0f, 0x1f, 0x38, 0x37, 0x3b, 0x3f, 0x30, 0x3e, 0x30, 0x3f, 0x30, 0x3f, 0x3f, 0x3f, 0x3b, 0x37, 
        0x38, 0x3f, 0x3f, 0x3f, 0x38, 0x37, 0x38, 0x3f, 0x30, 0x3f, 0x30, 0x3f, 0x3f, 0x3f, 0x1f, 0x0f
    }
};

// Static variable to capture when caps word is enabled
// Controlled by caps_word_set_user() in keymap.c
bool is_capsword_on;